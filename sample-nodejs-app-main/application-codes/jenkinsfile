pipeline {
  agent any

  environment {
    GCP_PROJECT = 'thermal-circle-462005-n6'
    GCR_IMAGE = "gcr.io/${GCP_PROJECT}/sample-nodejs-app"
    GOOGLE_APPLICATION_CREDENTIALS = "/var/lib/jenkins/gcp-key.json"
  }

  stages {
    /*
    stage('Checkout') {
      steps {
        echo "Cloning source code..."
        git branch: 'main', url: 'https://github.com/chaitraaaa/sample-nodejs-app.git'
      }
    }
    */

    stage('Auth to GCP') {
      steps {
        echo "Authenticating to GCP..."
        sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
        sh 'gcloud config set project $GCP_PROJECT'
        sh 'gcloud container clusters get-credentials my-cluster --region us-central1'
      }
    }

    stage('Build Docker Image') {
      steps {
        echo "Building Docker image..."
        sh 'docker build -t $GCR_IMAGE:latest sample-nodejs-app-main/application-codes'

      }
    }

    stage('Push Docker Image') {
      steps {
        echo "Pushing Docker image to GCR..."
        sh 'gcloud auth configure-docker'
        sh 'docker push $GCR_IMAGE:latest'
      }
    }

    /*stage('Deploy to GKE') {
      steps {
        echo "Deploying to Kubernetes..."
        // üî• Replace below with your actual deployment and container names
        sh 'kubectl set image deployment/hello-app hello-app=$GCR_IMAGE:latest --namespace=mynamespace'
        sh 'kubectl rollout status deployment/hello-app --namespace=mynamespace'
      }
    }*/
    stage('Deploy to GKE') {
      steps {
        echo "Deploying to Kubernetes..."
        sh 'kubectl apply -f k8s/deployment.yaml'
        sh 'kubectl rollout status deployment/hello-app --namespace=mynamespace'
  }
}
}

  post {
    success {
      echo '‚úÖ Deployment successful!'
    }
    failure {
      echo '‚ùå Deployment failed!'
    }
  }
}
